{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","series","setSeries","columns","setColumns","style","setStyle","legend","setLegend","most","setMost","selection","setSelection","highlight","setHighlight","useEffect","fetch","then","response","json","data","push","d","dd","parseInt","includes","points_all","points","c","val","undefined","sort","a","b","TimeSeries","name","styler","slice","map","key","label","padding","textAlign","timeRange","timerange","background","borderRadius","borderStyle","borderWidth","borderColor","paddingTop","paddingBottom","enableDragZoom","onBackgroundClick","enablePanZoom","height","id","type","min","max","width","axis","interpolation","onHighlightChange","onSelectionChange","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82cb228b.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { TimeSeries } from \"pondjs\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Resizable,\n  styler,\n  Legend,\n} from \"react-timeseries-charts\";\n\nfunction App() {\n  const [series, setSeries] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const [style, setStyle] = useState(null);\n  const [legend, setLegend] = useState(null);\n  const [most, setMost] = useState(null);\n  const [selection, setSelection] = useState();\n  const [highlight, setHighlight] = useState();\n  useEffect(() => {\n    fetch(\"https://wallstreetbets.s3-ap-southeast-2.amazonaws.com/wsb.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        let most = 0;\n        let columns = [];\n        columns.push(\"time\");\n        for (const d of data) {\n          for (const dd in d) {\n            if (dd === \"ts_end\") continue;\n            if (dd === \"timestamp\") continue;\n            if (parseInt(d[dd]) <= 20) continue;\n            if (parseInt(d[dd]) > most) most = parseInt(d[dd]);\n            if (!columns.includes(dd)) columns.push(dd);\n          }\n        }\n        setMost(most);\n        let points_all = [];\n        for (const d of data) {\n          let points = [];\n          points.push(parseInt(d[\"timestamp\"]) * 1000);\n          for (const c of columns) {\n            if (c === \"time\") continue;\n            let val = d[c];\n            if (val === undefined) val = 0;\n            points.push(parseInt(val));\n          }\n          points_all.push(points);\n        }\n        points_all = points_all.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        setSeries(\n          new TimeSeries({\n            name: \"tickers\",\n            columns: columns,\n            points: points_all,\n          })\n        );\n        setColumns(columns);\n        setStyle(styler(columns, \"Paired\"));\n        setLegend(columns.slice(1).map((d) => ({ key: d, label: d })));\n      });\n  }, []);\n\n  return (\n    <div style={{ padding: 50, textAlign: \"center\" }}>\n      <h1>r/wallstreetbets stock ticker symbol frequency</h1>\n      {series === null ? (\n        <></>\n      ) : (\n        <Resizable>\n          <ChartContainer\n            timeRange={series.timerange()}\n            style={{\n              background: \"#201d1e\",\n              borderRadius: 8,\n              borderStyle: \"solid\",\n              borderWidth: 1,\n              borderColor: \"#232122\",\n            }}\n            padding={20}\n            paddingTop={5}\n            paddingBottom={0}\n            enableDragZoom\n            onBackgroundClick={() => setSelection(null)}\n            enablePanZoom={true}\n          >\n            <ChartRow height=\"500\">\n              <YAxis id=\"axis1\" type=\"linear\" min={0} max={most} width=\"60\" />\n              <Charts>\n                <LineChart\n                  axis=\"axis1\"\n                  interpolation=\"curveBasis\"\n                  series={series}\n                  columns={columns}\n                  style={style}\n                  highlight={highlight}\n                  onHighlightChange={(highlight) => setHighlight(highlight)}\n                  selection={selection}\n                  onSelectionChange={(selection) => setSelection(selection)}\n                />\n              </Charts>\n            </ChartRow>\n          </ChartContainer>\n        </Resizable>\n      )}\n      {legend === null ? (\n        <></>\n      ) : (\n        <Legend\n          categories={legend}\n          style={style}\n          type=\"dot\"\n          highlight={highlight}\n          onHighlightChange={(highlight) => setHighlight(highlight)}\n          selection={selection}\n          onSelectionChange={(selection) => setSelection(selection)}\n        />\n      )}\n      <h3>by u/ejdoh1</h3>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}