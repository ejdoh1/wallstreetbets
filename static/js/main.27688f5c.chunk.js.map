{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","series","setSeries","columns","setColumns","style","setStyle","legend","setLegend","most","setMost","selection","setSelection","highlight","setHighlight","timerange","setTimerange","updated","setUpdated","useInterval","fetch","then","response","json","rawData","updatedAt","data","push","d","dd","parseInt","includes","points_all","points","c","val","undefined","sort","a","b","TimeSeries","name","range","styler","slice","map","key","label","padding","textAlign","timeRange","background","borderRadius","borderStyle","borderWidth","borderColor","paddingTop","paddingBottom","onBackgroundClick","enableDragZoom","onTimeRangeChanged","height","id","type","min","max","width","axis","interpolation","onHighlightChange","onSelectionChange","categories","date","email","projectId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27688f5c.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { TimeSeries } from \"pondjs\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Resizable,\n  styler,\n  Legend,\n} from \"react-timeseries-charts\";\nimport Feedback from \"feeder-react-feedback\"; // import Feedback component\nimport \"feeder-react-feedback/dist/feeder-react-feedback.css\"; // import stylesheet\nimport useInterval from \"use-interval\";\nimport TimeAgo from \"react-timeago\";\n\nfunction App() {\n  const [series, setSeries] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const [style, setStyle] = useState(null);\n  const [legend, setLegend] = useState(null);\n  const [most, setMost] = useState(null);\n  const [selection, setSelection] = useState();\n  const [highlight, setHighlight] = useState();\n  const [timerange, setTimerange] = useState();\n  const [updated, setUpdated] = useState();\n  useInterval(\n    () => {\n      fetch(\"https://wallstreetbets.s3-ap-southeast-2.amazonaws.com/wsb.json\")\n        .then((response) => response.json())\n        .then((rawData) => {\n          setUpdated(rawData.updatedAt);\n          const data = rawData.data;\n          let most = 0;\n          let columns = [];\n          columns.push(\"time\");\n          for (const d of data) {\n            for (const dd in d) {\n              if (dd === \"ts_end\") continue;\n              if (dd === \"timestamp\") continue;\n              if (parseInt(d[dd]) <= 20) continue;\n              if (parseInt(d[dd]) > most) most = parseInt(d[dd]);\n              if (!columns.includes(dd)) columns.push(dd);\n            }\n          }\n          setMost(most);\n          let points_all = [];\n          for (const d of data) {\n            let points = [];\n            points.push(parseInt(d[\"timestamp\"]) * 1000);\n            for (const c of columns) {\n              if (c === \"time\") continue;\n              let val = d[c];\n              if (val === undefined) val = 0;\n              points.push(parseInt(val));\n            }\n            points_all.push(points);\n          }\n          points_all = points_all.sort(function (a, b) {\n            return a[0] - b[0];\n          });\n          const series = new TimeSeries({\n            name: \"tickers\",\n            columns: columns,\n            points: points_all,\n          });\n          setTimerange(series.range());\n          setSeries(series);\n          setColumns(columns);\n          setStyle(styler(columns, \"Paired\"));\n          setLegend(columns.slice(1).map((d) => ({ key: d, label: d })));\n        });\n    },\n    1000 * 60 * 5,\n    true\n  );\n\n  return (\n    <div style={{ padding: 50, textAlign: \"center\" }}>\n      <h1>r/wallstreetbets comments stock ticker mention counts</h1>\n      {series === null ? (\n        <></>\n      ) : (\n        <Resizable>\n          <ChartContainer\n            timeRange={timerange}\n            style={{\n              background: \"#201d1e\",\n              borderRadius: 8,\n              borderStyle: \"solid\",\n              borderWidth: 1,\n              borderColor: \"#232122\",\n            }}\n            padding={20}\n            paddingTop={5}\n            paddingBottom={0}\n            onBackgroundClick={() => setSelection(null)}\n            enableDragZoom\n            onTimeRangeChanged={(timerange) => {\n              setTimerange(timerange);\n            }}\n          >\n            <ChartRow height=\"500\">\n              <YAxis id=\"axis1\" type=\"linear\" min={0} max={most} width=\"60\" />\n              <Charts>\n                <LineChart\n                  axis=\"axis1\"\n                  interpolation=\"curveBasis\"\n                  series={series}\n                  columns={columns}\n                  style={style}\n                  highlight={highlight}\n                  onHighlightChange={(highlight) => setHighlight(highlight)}\n                  selection={selection}\n                  onSelectionChange={(selection) => setSelection(selection)}\n                />\n              </Charts>\n            </ChartRow>\n          </ChartContainer>\n        </Resizable>\n      )}\n      {legend === null ? (\n        <></>\n      ) : (\n        <Legend\n          categories={legend}\n          style={style}\n          type=\"dot\"\n          highlight={highlight}\n          onHighlightChange={(highlight) => setHighlight(highlight)}\n          selection={selection}\n          onSelectionChange={(selection) => setSelection(selection)}\n        />\n      )}\n      <div>\n        Auto update interval 10 min, last updated <> </>\n        <TimeAgo date={updated*1000} />\n      </div>\n      <Feedback email projectId=\"60162ca5d28c6c00043d7747\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}