{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","series","setSeries","columns","setColumns","seriesPrices","setSeriesPrices","columnsPrices","setColumnsPrices","style","setStyle","legend","setLegend","most","setMost","mostPrices","setMostPrices","selection","setSelection","highlight","setHighlight","timerange","setTimerange","updated","setUpdated","useInterval","fetch","then","response","json","rawData","updatedAt","data","push","d","dd","parseInt","includes","points_all","points","c","val","undefined","sort","a","b","TimeSeries","name","range","styler","slice","map","key","label","mostPrice","padding","textAlign","timeRange","background","borderRadius","borderStyle","borderWidth","borderColor","paddingTop","paddingBottom","onBackgroundClick","enableDragZoom","onTimeRangeChanged","height","id","type","min","max","width","axis","interpolation","onHighlightChange","onSelectionChange","categories","date","email","projectId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81269854.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { TimeSeries } from \"pondjs\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Resizable,\n  styler,\n  Legend,\n} from \"react-timeseries-charts\";\nimport Feedback from \"feeder-react-feedback\"; // import Feedback component\nimport \"feeder-react-feedback/dist/feeder-react-feedback.css\"; // import stylesheet\nimport useInterval from \"use-interval\";\nimport TimeAgo from \"react-timeago\";\n\nfunction App() {\n  const [series, setSeries] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const [seriesPrices, setSeriesPrices] = useState(null);\n  const [columnsPrices, setColumnsPrices] = useState(null);\n  const [style, setStyle] = useState(null);\n  const [legend, setLegend] = useState(null);\n  const [most, setMost] = useState(null);\n  const [mostPrices, setMostPrices] = useState(null);\n  const [selection, setSelection] = useState();\n  const [highlight, setHighlight] = useState();\n  const [timerange, setTimerange] = useState();\n  const [updated, setUpdated] = useState();\n  useInterval(\n    () => {\n      fetch(\"https://wallstreetbets.s3-ap-southeast-2.amazonaws.com/wsb.json\")\n        .then((response) => response.json())\n        .then((rawData) => {\n          setUpdated(rawData.updatedAt);\n          const data = rawData.data;\n          let most = 0;\n          let columns = [];\n          columns.push(\"time\");\n          for (const d of data) {\n            for (const dd in d) {\n              if (dd === \"ts_end\") continue;\n              if (dd === \"timestamp\") continue;\n              if (parseInt(d[dd]) <= 20) continue;\n              if (parseInt(d[dd]) > most) most = parseInt(d[dd]);\n              if (!columns.includes(dd)) columns.push(dd);\n            }\n          }\n          setMost(most);\n          let points_all = [];\n          for (const d of data) {\n            let points = [];\n            points.push(parseInt(d[\"timestamp\"]) * 1000);\n            for (const c of columns) {\n              if (c === \"time\") continue;\n              let val = d[c];\n              if (val === undefined) val = 0;\n              points.push(parseInt(val));\n            }\n            points_all.push(points);\n          }\n          points_all = points_all.sort(function (a, b) {\n            return a[0] - b[0];\n          });\n          const series = new TimeSeries({\n            name: \"tickers\",\n            columns: columns,\n            points: points_all,\n          });\n          setTimerange(series.range());\n          setSeries(series);\n          setColumns(columns);\n          setStyle(styler(columns, \"Paired\"));\n          setLegend(columns.slice(1).map((d) => ({ key: d, label: d })));\n        });\n    },\n    1000 * 60 * 5,\n    true\n  );\n\n  useInterval(\n    () => {\n      fetch(\n        \"https://wallstreetbets.s3-ap-southeast-2.amazonaws.com/prices.json\"\n      )\n        .then((response) => response.json())\n        .then((rawData) => {\n          setUpdated(rawData.updatedAt);\n          const data = rawData.data;\n          let mostPrice = 0;\n          let columnsPrices = [];\n          columnsPrices.push(\"time\");\n          for (const d of data) {\n            for (const dd in d) {\n              if (dd === \"timestamp\") continue;\n              if (parseInt(d[dd]) > mostPrice) mostPrice = parseInt(d[dd]);\n              if (!columnsPrices.includes(dd)) columnsPrices.push(dd);\n            }\n          }\n          setMostPrices(mostPrice);\n          let points_all = [];\n          for (const d of data) {\n            let points = [];\n            points.push(parseInt(d[\"timestamp\"]) * 1000);\n            for (const c of columnsPrices) {\n              if (c === \"time\") continue;\n              let val = d[c];\n              if (val === undefined) val = 0;\n              points.push(parseInt(val));\n            }\n            points_all.push(points);\n          }\n          points_all = points_all.sort(function (a, b) {\n            return a[0] - b[0];\n          });\n          const seriesPrices = new TimeSeries({\n            name: \"tickers\",\n            columns: columnsPrices,\n            points: points_all,\n          });\n          setSeriesPrices(seriesPrices);\n          setColumnsPrices(columnsPrices);\n        });\n    },\n    1000 * 60 * 5,\n    true\n  );\n\n  return (\n    <div style={{ padding: 50, textAlign: \"center\" }}>\n      <h1>r/wallstreetbets comments</h1>\n      <h2>Ticker mention counts and stock price</h2>\n      {series === null || seriesPrices === null ? (\n        <></>\n      ) : (\n        <Resizable>\n          <ChartContainer\n            timeRange={timerange}\n            style={{\n              background: \"#201d1e\",\n              borderRadius: 8,\n              borderStyle: \"solid\",\n              borderWidth: 1,\n              borderColor: \"#232122\",\n            }}\n            padding={20}\n            paddingTop={5}\n            paddingBottom={0}\n            onBackgroundClick={() => setSelection(null)}\n            enableDragZoom\n            onTimeRangeChanged={(timerange) => {\n              setTimerange(timerange);\n            }}\n          >\n            <ChartRow height=\"300\" >\n              <YAxis id=\"axis1\" type=\"linear\" min={0} max={most} width=\"60\" label=\"Ticker mention counts\"/>\n              <Charts>\n                <LineChart\n                  axis=\"axis1\"\n                  interpolation=\"curveBasis\"\n                  series={series}\n                  columns={columns}\n                  style={style}\n                  highlight={highlight}\n                  onHighlightChange={(highlight) => setHighlight(highlight)}\n                  selection={selection}\n                  onSelectionChange={(selection) => setSelection(selection)}\n                />\n              </Charts>\n            </ChartRow>\n            <ChartRow height=\"200\" >\n              <YAxis\n                id=\"price\"\n                type=\"linear\"\n                min={0}\n                max={mostPrices}\n                width=\"60\"\n                label=\"Stock Price ($)\"\n              />\n              <Charts>\n                <LineChart\n                  axis=\"price\"\n                  interpolation=\"curveBasis\"\n                  series={seriesPrices}\n                  columns={columnsPrices}\n                  style={style}\n                  highlight={highlight}\n                  onHighlightChange={(highlight) => setHighlight(highlight)}\n                  selection={selection}\n                  onSelectionChange={(selection) => setSelection(selection)}\n                />\n              </Charts>\n            </ChartRow>\n          </ChartContainer>\n        </Resizable>\n      )}\n      {legend === null ? (\n        <></>\n      ) : (\n        <Legend\n          categories={legend}\n          style={style}\n          type=\"dot\"\n          highlight={highlight}\n          onHighlightChange={(highlight) => setHighlight(highlight)}\n          selection={selection}\n          onSelectionChange={(selection) => setSelection(selection)}\n        />\n      )}\n      <div>\n        Auto update interval 10 min, last updated <> </>\n        <TimeAgo date={updated * 1000} />\n      </div>\n      <Feedback email projectId=\"60162ca5d28c6c00043d7747\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}